Assuming you have the qeduce library in your classpath:

```tut:silent
import qeduce._
```

```tut:silent
val x = "fred"
```

Now create some SQL like this:

```tut:book
val s = sql"select * from users where name = $x"
```

Add some result handling:

```tut:book
val e = s map {row => (row[Long]('ident), row[Option[Double]]('score)) }
```

Here row is a ResultSet and the 

Now run it:

```tut
```

We can define terms, if they are frequently used:

```tut:silent
val ident = term[Long]('ident)
val score = term[Option[Double]]('score)
```

Now use terms instead of symbols, it is shorter:

```tut:book
val e = s map {row => (row(ident), row(score))}
```

The row can be implicit to make this even shorter:

```tut:book
val e = s map { implicit row => (ident(), score()) }
```

